// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	memcache "github.com/bradfitz/gomemcache/memcache"
	mock "github.com/stretchr/testify/mock"
)

// MemcachedClient is an autogenerated mock type for the MemcachedClient type
type MemcachedClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *MemcachedClient) Get(key string) (*memcache.Item, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *memcache.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*memcache.Item, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *memcache.Item); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memcache.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: item
func (_m *MemcachedClient) Set(item *memcache.Item) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*memcache.Item) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMemcachedClient creates a new instance of MemcachedClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemcachedClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemcachedClient {
	mock := &MemcachedClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
